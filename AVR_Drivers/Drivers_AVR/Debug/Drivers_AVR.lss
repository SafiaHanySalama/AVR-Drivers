
Drivers_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00000c26  00000cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080013c  0080013c  00000d96  2**0
                  ALLOC
  3 .stab         00001794  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db7  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 33       	cpi	r26, 0x3C	; 60
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ac e3       	ldi	r26, 0x3C	; 60
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 34       	cpi	r26, 0x45	; 69
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 05 	call	0xbaa	; 0xbaa <main>
  8a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Port_Init>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2b 97       	sbiw	r28, 0x0b	; 11
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	99 87       	std	Y+9, r25	; 0x09
  a8:	88 87       	std	Y+8, r24	; 0x08
  aa:	1f 82       	std	Y+7, r1	; 0x07
  ac:	1e 82       	std	Y+6, r1	; 0x06
  ae:	1d 82       	std	Y+5, r1	; 0x05
  b0:	1c 82       	std	Y+4, r1	; 0x04
  b2:	1b 82       	std	Y+3, r1	; 0x03
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	88 85       	ldd	r24, Y+8	; 0x08
  b8:	99 85       	ldd	r25, Y+9	; 0x09
  ba:	90 93 3d 01 	sts	0x013D, r25
  be:	80 93 3c 01 	sts	0x013C, r24
  c2:	19 82       	std	Y+1, r1	; 0x01
  c4:	bd c1       	rjmp	.+890    	; 0x440 <Port_Init+0x3ae>
  c6:	40 91 3c 01 	lds	r20, 0x013C
  ca:	50 91 3d 01 	lds	r21, 0x013D
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	28 2f       	mov	r18, r24
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	c9 01       	movw	r24, r18
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	82 0f       	add	r24, r18
  dc:	93 1f       	adc	r25, r19
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	fa 01       	movw	r30, r20
  e4:	e8 0f       	add	r30, r24
  e6:	f9 1f       	adc	r31, r25
  e8:	80 81       	ld	r24, Z
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	3b 87       	std	Y+11, r19	; 0x0b
  f0:	2a 87       	std	Y+10, r18	; 0x0a
  f2:	8a 85       	ldd	r24, Y+10	; 0x0a
  f4:	9b 85       	ldd	r25, Y+11	; 0x0b
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	11 f1       	breq	.+68     	; 0x140 <Port_Init+0xae>
  fc:	2a 85       	ldd	r18, Y+10	; 0x0a
  fe:	3b 85       	ldd	r19, Y+11	; 0x0b
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	2c f4       	brge	.+10     	; 0x110 <Port_Init+0x7e>
 106:	8a 85       	ldd	r24, Y+10	; 0x0a
 108:	9b 85       	ldd	r25, Y+11	; 0x0b
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	61 f0       	breq	.+24     	; 0x126 <Port_Init+0x94>
 10e:	3e c0       	rjmp	.+124    	; 0x18c <Port_Init+0xfa>
 110:	2a 85       	ldd	r18, Y+10	; 0x0a
 112:	3b 85       	ldd	r19, Y+11	; 0x0b
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	01 f1       	breq	.+64     	; 0x15a <Port_Init+0xc8>
 11a:	8a 85       	ldd	r24, Y+10	; 0x0a
 11c:	9b 85       	ldd	r25, Y+11	; 0x0b
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	91 05       	cpc	r25, r1
 122:	41 f1       	breq	.+80     	; 0x174 <Port_Init+0xe2>
 124:	33 c0       	rjmp	.+102    	; 0x18c <Port_Init+0xfa>
 126:	8b e3       	ldi	r24, 0x3B	; 59
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	9f 83       	std	Y+7, r25	; 0x07
 12c:	8e 83       	std	Y+6, r24	; 0x06
 12e:	89 e3       	ldi	r24, 0x39	; 57
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9d 83       	std	Y+5, r25	; 0x05
 134:	8c 83       	std	Y+4, r24	; 0x04
 136:	8a e3       	ldi	r24, 0x3A	; 58
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9b 83       	std	Y+3, r25	; 0x03
 13c:	8a 83       	std	Y+2, r24	; 0x02
 13e:	26 c0       	rjmp	.+76     	; 0x18c <Port_Init+0xfa>
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9f 83       	std	Y+7, r25	; 0x07
 146:	8e 83       	std	Y+6, r24	; 0x06
 148:	86 e3       	ldi	r24, 0x36	; 54
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9d 83       	std	Y+5, r25	; 0x05
 14e:	8c 83       	std	Y+4, r24	; 0x04
 150:	87 e3       	ldi	r24, 0x37	; 55
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	9b 83       	std	Y+3, r25	; 0x03
 156:	8a 83       	std	Y+2, r24	; 0x02
 158:	19 c0       	rjmp	.+50     	; 0x18c <Port_Init+0xfa>
 15a:	85 e3       	ldi	r24, 0x35	; 53
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	9f 83       	std	Y+7, r25	; 0x07
 160:	8e 83       	std	Y+6, r24	; 0x06
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9d 83       	std	Y+5, r25	; 0x05
 168:	8c 83       	std	Y+4, r24	; 0x04
 16a:	84 e3       	ldi	r24, 0x34	; 52
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9b 83       	std	Y+3, r25	; 0x03
 170:	8a 83       	std	Y+2, r24	; 0x02
 172:	0c c0       	rjmp	.+24     	; 0x18c <Port_Init+0xfa>
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	9f 83       	std	Y+7, r25	; 0x07
 17a:	8e 83       	std	Y+6, r24	; 0x06
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9d 83       	std	Y+5, r25	; 0x05
 182:	8c 83       	std	Y+4, r24	; 0x04
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	8a 83       	std	Y+2, r24	; 0x02
 18c:	40 91 3c 01 	lds	r20, 0x013C
 190:	50 91 3d 01 	lds	r21, 0x013D
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	c9 01       	movw	r24, r18
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	82 0f       	add	r24, r18
 1a2:	93 1f       	adc	r25, r19
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	fa 01       	movw	r30, r20
 1aa:	e8 0f       	add	r30, r24
 1ac:	f9 1f       	adc	r31, r25
 1ae:	82 81       	ldd	r24, Z+2	; 0x02
 1b0:	88 23       	and	r24, r24
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <Port_Init+0x124>
 1b4:	98 c0       	rjmp	.+304    	; 0x2e6 <Port_Init+0x254>
 1b6:	ea 81       	ldd	r30, Y+2	; 0x02
 1b8:	fb 81       	ldd	r31, Y+3	; 0x03
 1ba:	80 81       	ld	r24, Z
 1bc:	68 2f       	mov	r22, r24
 1be:	40 91 3c 01 	lds	r20, 0x013C
 1c2:	50 91 3d 01 	lds	r21, 0x013D
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	c9 01       	movw	r24, r18
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	fa 01       	movw	r30, r20
 1dc:	e8 0f       	add	r30, r24
 1de:	f9 1f       	adc	r31, r25
 1e0:	81 81       	ldd	r24, Z+1	; 0x01
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <Port_Init+0x15e>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <Port_Init+0x15a>
 1f4:	80 95       	com	r24
 1f6:	86 23       	and	r24, r22
 1f8:	ea 81       	ldd	r30, Y+2	; 0x02
 1fa:	fb 81       	ldd	r31, Y+3	; 0x03
 1fc:	80 83       	st	Z, r24
 1fe:	40 91 3c 01 	lds	r20, 0x013C
 202:	50 91 3d 01 	lds	r21, 0x013D
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	c9 01       	movw	r24, r18
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	82 0f       	add	r24, r18
 214:	93 1f       	adc	r25, r19
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	fa 01       	movw	r30, r20
 21c:	e8 0f       	add	r30, r24
 21e:	f9 1f       	adc	r31, r25
 220:	84 81       	ldd	r24, Z+4	; 0x04
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	29 f5       	brne	.+74     	; 0x270 <Port_Init+0x1de>
 226:	ee 81       	ldd	r30, Y+6	; 0x06
 228:	ff 81       	ldd	r31, Y+7	; 0x07
 22a:	80 81       	ld	r24, Z
 22c:	68 2f       	mov	r22, r24
 22e:	40 91 3c 01 	lds	r20, 0x013C
 232:	50 91 3d 01 	lds	r21, 0x013D
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	c9 01       	movw	r24, r18
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	82 0f       	add	r24, r18
 244:	93 1f       	adc	r25, r19
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	fa 01       	movw	r30, r20
 24c:	e8 0f       	add	r30, r24
 24e:	f9 1f       	adc	r31, r25
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <Port_Init+0x1d0>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <Port_Init+0x1cc>
 266:	86 2b       	or	r24, r22
 268:	ee 81       	ldd	r30, Y+6	; 0x06
 26a:	ff 81       	ldd	r31, Y+7	; 0x07
 26c:	80 83       	st	Z, r24
 26e:	e5 c0       	rjmp	.+458    	; 0x43a <Port_Init+0x3a8>
 270:	40 91 3c 01 	lds	r20, 0x013C
 274:	50 91 3d 01 	lds	r21, 0x013D
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	c9 01       	movw	r24, r18
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	82 0f       	add	r24, r18
 286:	93 1f       	adc	r25, r19
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	fa 01       	movw	r30, r20
 28e:	e8 0f       	add	r30, r24
 290:	f9 1f       	adc	r31, r25
 292:	84 81       	ldd	r24, Z+4	; 0x04
 294:	88 23       	and	r24, r24
 296:	09 f0       	breq	.+2      	; 0x29a <Port_Init+0x208>
 298:	d0 c0       	rjmp	.+416    	; 0x43a <Port_Init+0x3a8>
 29a:	ee 81       	ldd	r30, Y+6	; 0x06
 29c:	ff 81       	ldd	r31, Y+7	; 0x07
 29e:	80 81       	ld	r24, Z
 2a0:	68 2f       	mov	r22, r24
 2a2:	40 91 3c 01 	lds	r20, 0x013C
 2a6:	50 91 3d 01 	lds	r21, 0x013D
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	c9 01       	movw	r24, r18
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	82 0f       	add	r24, r18
 2b8:	93 1f       	adc	r25, r19
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	fa 01       	movw	r30, r20
 2c0:	e8 0f       	add	r30, r24
 2c2:	f9 1f       	adc	r31, r25
 2c4:	81 81       	ldd	r24, Z+1	; 0x01
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Port_Init+0x244>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Port_Init+0x240>
 2da:	80 95       	com	r24
 2dc:	86 23       	and	r24, r22
 2de:	ee 81       	ldd	r30, Y+6	; 0x06
 2e0:	ff 81       	ldd	r31, Y+7	; 0x07
 2e2:	80 83       	st	Z, r24
 2e4:	aa c0       	rjmp	.+340    	; 0x43a <Port_Init+0x3a8>
 2e6:	40 91 3c 01 	lds	r20, 0x013C
 2ea:	50 91 3d 01 	lds	r21, 0x013D
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	c9 01       	movw	r24, r18
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	82 0f       	add	r24, r18
 2fc:	93 1f       	adc	r25, r19
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	fa 01       	movw	r30, r20
 304:	e8 0f       	add	r30, r24
 306:	f9 1f       	adc	r31, r25
 308:	82 81       	ldd	r24, Z+2	; 0x02
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	09 f0       	breq	.+2      	; 0x310 <Port_Init+0x27e>
 30e:	95 c0       	rjmp	.+298    	; 0x43a <Port_Init+0x3a8>
 310:	ea 81       	ldd	r30, Y+2	; 0x02
 312:	fb 81       	ldd	r31, Y+3	; 0x03
 314:	80 81       	ld	r24, Z
 316:	68 2f       	mov	r22, r24
 318:	40 91 3c 01 	lds	r20, 0x013C
 31c:	50 91 3d 01 	lds	r21, 0x013D
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	c9 01       	movw	r24, r18
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	fa 01       	movw	r30, r20
 336:	e8 0f       	add	r30, r24
 338:	f9 1f       	adc	r31, r25
 33a:	81 81       	ldd	r24, Z+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <Port_Init+0x2b8>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	2a 95       	dec	r18
 34c:	e2 f7       	brpl	.-8      	; 0x346 <Port_Init+0x2b4>
 34e:	86 2b       	or	r24, r22
 350:	ea 81       	ldd	r30, Y+2	; 0x02
 352:	fb 81       	ldd	r31, Y+3	; 0x03
 354:	80 83       	st	Z, r24
 356:	40 91 3c 01 	lds	r20, 0x013C
 35a:	50 91 3d 01 	lds	r21, 0x013D
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	c9 01       	movw	r24, r18
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	82 0f       	add	r24, r18
 36c:	93 1f       	adc	r25, r19
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	fa 01       	movw	r30, r20
 374:	e8 0f       	add	r30, r24
 376:	f9 1f       	adc	r31, r25
 378:	83 81       	ldd	r24, Z+3	; 0x03
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	29 f5       	brne	.+74     	; 0x3c8 <Port_Init+0x336>
 37e:	ee 81       	ldd	r30, Y+6	; 0x06
 380:	ff 81       	ldd	r31, Y+7	; 0x07
 382:	80 81       	ld	r24, Z
 384:	68 2f       	mov	r22, r24
 386:	40 91 3c 01 	lds	r20, 0x013C
 38a:	50 91 3d 01 	lds	r21, 0x013D
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	c9 01       	movw	r24, r18
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	82 0f       	add	r24, r18
 39c:	93 1f       	adc	r25, r19
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	fa 01       	movw	r30, r20
 3a4:	e8 0f       	add	r30, r24
 3a6:	f9 1f       	adc	r31, r25
 3a8:	81 81       	ldd	r24, Z+1	; 0x01
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <Port_Init+0x328>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <Port_Init+0x324>
 3be:	86 2b       	or	r24, r22
 3c0:	ee 81       	ldd	r30, Y+6	; 0x06
 3c2:	ff 81       	ldd	r31, Y+7	; 0x07
 3c4:	80 83       	st	Z, r24
 3c6:	39 c0       	rjmp	.+114    	; 0x43a <Port_Init+0x3a8>
 3c8:	40 91 3c 01 	lds	r20, 0x013C
 3cc:	50 91 3d 01 	lds	r21, 0x013D
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	c9 01       	movw	r24, r18
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	fa 01       	movw	r30, r20
 3e6:	e8 0f       	add	r30, r24
 3e8:	f9 1f       	adc	r31, r25
 3ea:	83 81       	ldd	r24, Z+3	; 0x03
 3ec:	88 23       	and	r24, r24
 3ee:	29 f5       	brne	.+74     	; 0x43a <Port_Init+0x3a8>
 3f0:	ee 81       	ldd	r30, Y+6	; 0x06
 3f2:	ff 81       	ldd	r31, Y+7	; 0x07
 3f4:	80 81       	ld	r24, Z
 3f6:	68 2f       	mov	r22, r24
 3f8:	40 91 3c 01 	lds	r20, 0x013C
 3fc:	50 91 3d 01 	lds	r21, 0x013D
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	c9 01       	movw	r24, r18
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	fa 01       	movw	r30, r20
 416:	e8 0f       	add	r30, r24
 418:	f9 1f       	adc	r31, r25
 41a:	81 81       	ldd	r24, Z+1	; 0x01
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <Port_Init+0x39a>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <Port_Init+0x396>
 430:	80 95       	com	r24
 432:	86 23       	and	r24, r22
 434:	ee 81       	ldd	r30, Y+6	; 0x06
 436:	ff 81       	ldd	r31, Y+7	; 0x07
 438:	80 83       	st	Z, r24
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	89 83       	std	Y+1, r24	; 0x01
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	80 32       	cpi	r24, 0x20	; 32
 444:	08 f4       	brcc	.+2      	; 0x448 <Port_Init+0x3b6>
 446:	3f ce       	rjmp	.-898    	; 0xc6 <Port_Init+0x34>
 448:	2b 96       	adiw	r28, 0x0b	; 11
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	cf 91       	pop	r28
 456:	df 91       	pop	r29
 458:	08 95       	ret

0000045a <Dio_Init>:
#include "Dio_Regs.h"

static Dio_ConfigChannel * Dio_PortChannels = NULL_PTR;

void Dio_Init(const Dio_ConfigType * ConfigPtr)
{
 45a:	df 93       	push	r29
 45c:	cf 93       	push	r28
 45e:	00 d0       	rcall	.+0      	; 0x460 <Dio_Init+0x6>
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	89 83       	std	Y+1, r24	; 0x01
	Dio_PortChannels = ConfigPtr->Channels;
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	90 93 3f 01 	sts	0x013F, r25
 470:	80 93 3e 01 	sts	0x013E, r24
}
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	cf 91       	pop	r28
 47a:	df 91       	pop	r29
 47c:	08 95       	ret

0000047e <Dio_WriteChannel>:
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
 47e:	df 93       	push	r29
 480:	cf 93       	push	r28
 482:	00 d0       	rcall	.+0      	; 0x484 <Dio_WriteChannel+0x6>
 484:	00 d0       	rcall	.+0      	; 0x486 <Dio_WriteChannel+0x8>
 486:	00 d0       	rcall	.+0      	; 0x488 <Dio_WriteChannel+0xa>
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	8b 83       	std	Y+3, r24	; 0x03
 48e:	6c 83       	std	Y+4, r22	; 0x04
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 490:	1a 82       	std	Y+2, r1	; 0x02
 492:	19 82       	std	Y+1, r1	; 0x01
	/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
	switch(Dio_PortChannels[ChannelId].Port_Num)
 494:	20 91 3e 01 	lds	r18, 0x013E
 498:	30 91 3f 01 	lds	r19, 0x013F
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	f9 01       	movw	r30, r18
 4a8:	e8 0f       	add	r30, r24
 4aa:	f9 1f       	adc	r31, r25
 4ac:	80 81       	ld	r24, Z
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	3e 83       	std	Y+6, r19	; 0x06
 4b4:	2d 83       	std	Y+5, r18	; 0x05
 4b6:	8d 81       	ldd	r24, Y+5	; 0x05
 4b8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	91 05       	cpc	r25, r1
 4be:	d1 f0       	breq	.+52     	; 0x4f4 <Dio_WriteChannel+0x76>
 4c0:	2d 81       	ldd	r18, Y+5	; 0x05
 4c2:	3e 81       	ldd	r19, Y+6	; 0x06
 4c4:	22 30       	cpi	r18, 0x02	; 2
 4c6:	31 05       	cpc	r19, r1
 4c8:	2c f4       	brge	.+10     	; 0x4d4 <Dio_WriteChannel+0x56>
 4ca:	8d 81       	ldd	r24, Y+5	; 0x05
 4cc:	9e 81       	ldd	r25, Y+6	; 0x06
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	61 f0       	breq	.+24     	; 0x4ea <Dio_WriteChannel+0x6c>
 4d2:	1e c0       	rjmp	.+60     	; 0x510 <Dio_WriteChannel+0x92>
 4d4:	2d 81       	ldd	r18, Y+5	; 0x05
 4d6:	3e 81       	ldd	r19, Y+6	; 0x06
 4d8:	22 30       	cpi	r18, 0x02	; 2
 4da:	31 05       	cpc	r19, r1
 4dc:	81 f0       	breq	.+32     	; 0x4fe <Dio_WriteChannel+0x80>
 4de:	8d 81       	ldd	r24, Y+5	; 0x05
 4e0:	9e 81       	ldd	r25, Y+6	; 0x06
 4e2:	83 30       	cpi	r24, 0x03	; 3
 4e4:	91 05       	cpc	r25, r1
 4e6:	81 f0       	breq	.+32     	; 0x508 <Dio_WriteChannel+0x8a>
 4e8:	13 c0       	rjmp	.+38     	; 0x510 <Dio_WriteChannel+0x92>
	{
		case 0:	Port_Ptr = &PORTA_REG;
 4ea:	8b e3       	ldi	r24, 0x3B	; 59
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	89 83       	std	Y+1, r24	; 0x01
 4f2:	0e c0       	rjmp	.+28     	; 0x510 <Dio_WriteChannel+0x92>
			break;
		case 1:	Port_Ptr = &PORTB_REG;
 4f4:	88 e3       	ldi	r24, 0x38	; 56
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	9a 83       	std	Y+2, r25	; 0x02
 4fa:	89 83       	std	Y+1, r24	; 0x01
 4fc:	09 c0       	rjmp	.+18     	; 0x510 <Dio_WriteChannel+0x92>
			break;
		case 2:	Port_Ptr = &PORTC_REG;
 4fe:	85 e3       	ldi	r24, 0x35	; 53
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	9a 83       	std	Y+2, r25	; 0x02
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	04 c0       	rjmp	.+8      	; 0x510 <Dio_WriteChannel+0x92>
			break;
		case 3:	Port_Ptr = &PORTD_REG;
 508:	82 e3       	ldi	r24, 0x32	; 50
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9a 83       	std	Y+2, r25	; 0x02
 50e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	if(Level == STD_HIGH)
 510:	8c 81       	ldd	r24, Y+4	; 0x04
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	01 f5       	brne	.+64     	; 0x556 <Dio_WriteChannel+0xd8>
	{
		/* Write Logic High */
		SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 516:	e9 81       	ldd	r30, Y+1	; 0x01
 518:	fa 81       	ldd	r31, Y+2	; 0x02
 51a:	80 81       	ld	r24, Z
 51c:	48 2f       	mov	r20, r24
 51e:	20 91 3e 01 	lds	r18, 0x013E
 522:	30 91 3f 01 	lds	r19, 0x013F
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	88 2f       	mov	r24, r24
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	f9 01       	movw	r30, r18
 532:	e8 0f       	add	r30, r24
 534:	f9 1f       	adc	r31, r25
 536:	81 81       	ldd	r24, Z+1	; 0x01
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <Dio_WriteChannel+0xca>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <Dio_WriteChannel+0xc6>
 54c:	84 2b       	or	r24, r20
 54e:	e9 81       	ldd	r30, Y+1	; 0x01
 550:	fa 81       	ldd	r31, Y+2	; 0x02
 552:	80 83       	st	Z, r24
 554:	23 c0       	rjmp	.+70     	; 0x59c <Dio_WriteChannel+0x11e>
	}
	else if(Level == STD_LOW)
 556:	8c 81       	ldd	r24, Y+4	; 0x04
 558:	88 23       	and	r24, r24
 55a:	01 f5       	brne	.+64     	; 0x59c <Dio_WriteChannel+0x11e>
	{
		/* Write Logic Low */
		CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 55c:	e9 81       	ldd	r30, Y+1	; 0x01
 55e:	fa 81       	ldd	r31, Y+2	; 0x02
 560:	80 81       	ld	r24, Z
 562:	48 2f       	mov	r20, r24
 564:	20 91 3e 01 	lds	r18, 0x013E
 568:	30 91 3f 01 	lds	r19, 0x013F
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	88 2f       	mov	r24, r24
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	f9 01       	movw	r30, r18
 578:	e8 0f       	add	r30, r24
 57a:	f9 1f       	adc	r31, r25
 57c:	81 81       	ldd	r24, Z+1	; 0x01
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 2e       	mov	r0, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <Dio_WriteChannel+0x110>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <Dio_WriteChannel+0x10c>
 592:	80 95       	com	r24
 594:	84 23       	and	r24, r20
 596:	e9 81       	ldd	r30, Y+1	; 0x01
 598:	fa 81       	ldd	r31, Y+2	; 0x02
 59a:	80 83       	st	Z, r24
	}
}
 59c:	26 96       	adiw	r28, 0x06	; 6
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	cf 91       	pop	r28
 5aa:	df 91       	pop	r29
 5ac:	08 95       	ret

000005ae <Dio_ReadChannel>:
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 5ae:	df 93       	push	r29
 5b0:	cf 93       	push	r28
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <Dio_ReadChannel+0x6>
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <Dio_ReadChannel+0x8>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <Dio_ReadChannel+0xa>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	8c 83       	std	Y+4, r24	; 0x04
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 5be:	1b 82       	std	Y+3, r1	; 0x03
 5c0:	1a 82       	std	Y+2, r1	; 0x02
	Dio_LevelType output = STD_LOW;
 5c2:	19 82       	std	Y+1, r1	; 0x01
	switch(Dio_PortChannels[ChannelId].Port_Num)
 5c4:	20 91 3e 01 	lds	r18, 0x013E
 5c8:	30 91 3f 01 	lds	r19, 0x013F
 5cc:	8c 81       	ldd	r24, Y+4	; 0x04
 5ce:	88 2f       	mov	r24, r24
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	f9 01       	movw	r30, r18
 5d8:	e8 0f       	add	r30, r24
 5da:	f9 1f       	adc	r31, r25
 5dc:	80 81       	ld	r24, Z
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	3e 83       	std	Y+6, r19	; 0x06
 5e4:	2d 83       	std	Y+5, r18	; 0x05
 5e6:	8d 81       	ldd	r24, Y+5	; 0x05
 5e8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	91 05       	cpc	r25, r1
 5ee:	d1 f0       	breq	.+52     	; 0x624 <Dio_ReadChannel+0x76>
 5f0:	2d 81       	ldd	r18, Y+5	; 0x05
 5f2:	3e 81       	ldd	r19, Y+6	; 0x06
 5f4:	22 30       	cpi	r18, 0x02	; 2
 5f6:	31 05       	cpc	r19, r1
 5f8:	2c f4       	brge	.+10     	; 0x604 <Dio_ReadChannel+0x56>
 5fa:	8d 81       	ldd	r24, Y+5	; 0x05
 5fc:	9e 81       	ldd	r25, Y+6	; 0x06
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	61 f0       	breq	.+24     	; 0x61a <Dio_ReadChannel+0x6c>
 602:	1e c0       	rjmp	.+60     	; 0x640 <Dio_ReadChannel+0x92>
 604:	2d 81       	ldd	r18, Y+5	; 0x05
 606:	3e 81       	ldd	r19, Y+6	; 0x06
 608:	22 30       	cpi	r18, 0x02	; 2
 60a:	31 05       	cpc	r19, r1
 60c:	81 f0       	breq	.+32     	; 0x62e <Dio_ReadChannel+0x80>
 60e:	8d 81       	ldd	r24, Y+5	; 0x05
 610:	9e 81       	ldd	r25, Y+6	; 0x06
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	91 05       	cpc	r25, r1
 616:	81 f0       	breq	.+32     	; 0x638 <Dio_ReadChannel+0x8a>
 618:	13 c0       	rjmp	.+38     	; 0x640 <Dio_ReadChannel+0x92>
	{
		case 0:	PIN_Ptr = &PINA_REG;
 61a:	89 e3       	ldi	r24, 0x39	; 57
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	9b 83       	std	Y+3, r25	; 0x03
 620:	8a 83       	std	Y+2, r24	; 0x02
 622:	0e c0       	rjmp	.+28     	; 0x640 <Dio_ReadChannel+0x92>
		break;
		case 1:	PIN_Ptr = &PINB_REG;
 624:	86 e3       	ldi	r24, 0x36	; 54
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	9b 83       	std	Y+3, r25	; 0x03
 62a:	8a 83       	std	Y+2, r24	; 0x02
 62c:	09 c0       	rjmp	.+18     	; 0x640 <Dio_ReadChannel+0x92>
		break;
		case 2:	PIN_Ptr = &PINC_REG;
 62e:	83 e3       	ldi	r24, 0x33	; 51
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	9b 83       	std	Y+3, r25	; 0x03
 634:	8a 83       	std	Y+2, r24	; 0x02
 636:	04 c0       	rjmp	.+8      	; 0x640 <Dio_ReadChannel+0x92>
		break;
		case 3:	PIN_Ptr = &PIND_REG;
 638:	80 e3       	ldi	r24, 0x30	; 48
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	9b 83       	std	Y+3, r25	; 0x03
 63e:	8a 83       	std	Y+2, r24	; 0x02
		break;
	}
		/* Read the required channel */
	if(GET_BIT(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num)==1)
 640:	ea 81       	ldd	r30, Y+2	; 0x02
 642:	fb 81       	ldd	r31, Y+3	; 0x03
 644:	80 81       	ld	r24, Z
 646:	48 2f       	mov	r20, r24
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	20 91 3e 01 	lds	r18, 0x013E
 64e:	30 91 3f 01 	lds	r19, 0x013F
 652:	8c 81       	ldd	r24, Y+4	; 0x04
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	f9 01       	movw	r30, r18
 65e:	e8 0f       	add	r30, r24
 660:	f9 1f       	adc	r31, r25
 662:	81 81       	ldd	r24, Z+1	; 0x01
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <Dio_ReadChannel+0xc4>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	2a 95       	dec	r18
 674:	e2 f7       	brpl	.-8      	; 0x66e <Dio_ReadChannel+0xc0>
 676:	48 23       	and	r20, r24
 678:	59 23       	and	r21, r25
 67a:	20 91 3e 01 	lds	r18, 0x013E
 67e:	30 91 3f 01 	lds	r19, 0x013F
 682:	8c 81       	ldd	r24, Y+4	; 0x04
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	f9 01       	movw	r30, r18
 68e:	e8 0f       	add	r30, r24
 690:	f9 1f       	adc	r31, r25
 692:	81 81       	ldd	r24, Z+1	; 0x01
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	9a 01       	movw	r18, r20
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <Dio_ReadChannel+0xf2>
 69c:	35 95       	asr	r19
 69e:	27 95       	ror	r18
 6a0:	8a 95       	dec	r24
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <Dio_ReadChannel+0xee>
 6a4:	c9 01       	movw	r24, r18
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	91 05       	cpc	r25, r1
 6aa:	19 f4       	brne	.+6      	; 0x6b2 <Dio_ReadChannel+0x104>
	{
		output = STD_HIGH;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <Dio_ReadChannel+0x106>
	}
	else
	{
		output = STD_LOW;
 6b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return output;
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b6:	26 96       	adiw	r28, 0x06	; 6
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	cf 91       	pop	r28
 6c4:	df 91       	pop	r29
 6c6:	08 95       	ret

000006c8 <Dio_FlipChannel>:

Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 6c8:	df 93       	push	r29
 6ca:	cf 93       	push	r28
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	28 97       	sbiw	r28, 0x08	; 8
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	8e 83       	std	Y+6, r24	; 0x06
	/*In case of error return something else */
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 6de:	1d 82       	std	Y+5, r1	; 0x05
 6e0:	1c 82       	std	Y+4, r1	; 0x04
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 6e2:	1b 82       	std	Y+3, r1	; 0x03
 6e4:	1a 82       	std	Y+2, r1	; 0x02
	Dio_LevelType output = STD_LOW;
 6e6:	19 82       	std	Y+1, r1	; 0x01
	switch(Dio_PortChannels[ChannelId].Port_Num)
 6e8:	20 91 3e 01 	lds	r18, 0x013E
 6ec:	30 91 3f 01 	lds	r19, 0x013F
 6f0:	8e 81       	ldd	r24, Y+6	; 0x06
 6f2:	88 2f       	mov	r24, r24
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	f9 01       	movw	r30, r18
 6fc:	e8 0f       	add	r30, r24
 6fe:	f9 1f       	adc	r31, r25
 700:	80 81       	ld	r24, Z
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	38 87       	std	Y+8, r19	; 0x08
 708:	2f 83       	std	Y+7, r18	; 0x07
 70a:	8f 81       	ldd	r24, Y+7	; 0x07
 70c:	98 85       	ldd	r25, Y+8	; 0x08
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	91 05       	cpc	r25, r1
 712:	f1 f0       	breq	.+60     	; 0x750 <Dio_FlipChannel+0x88>
 714:	2f 81       	ldd	r18, Y+7	; 0x07
 716:	38 85       	ldd	r19, Y+8	; 0x08
 718:	22 30       	cpi	r18, 0x02	; 2
 71a:	31 05       	cpc	r19, r1
 71c:	2c f4       	brge	.+10     	; 0x728 <Dio_FlipChannel+0x60>
 71e:	8f 81       	ldd	r24, Y+7	; 0x07
 720:	98 85       	ldd	r25, Y+8	; 0x08
 722:	00 97       	sbiw	r24, 0x00	; 0
 724:	61 f0       	breq	.+24     	; 0x73e <Dio_FlipChannel+0x76>
 726:	2e c0       	rjmp	.+92     	; 0x784 <Dio_FlipChannel+0xbc>
 728:	2f 81       	ldd	r18, Y+7	; 0x07
 72a:	38 85       	ldd	r19, Y+8	; 0x08
 72c:	22 30       	cpi	r18, 0x02	; 2
 72e:	31 05       	cpc	r19, r1
 730:	c1 f0       	breq	.+48     	; 0x762 <Dio_FlipChannel+0x9a>
 732:	8f 81       	ldd	r24, Y+7	; 0x07
 734:	98 85       	ldd	r25, Y+8	; 0x08
 736:	83 30       	cpi	r24, 0x03	; 3
 738:	91 05       	cpc	r25, r1
 73a:	e1 f0       	breq	.+56     	; 0x774 <Dio_FlipChannel+0xac>
 73c:	23 c0       	rjmp	.+70     	; 0x784 <Dio_FlipChannel+0xbc>
	{
	case 0:	Port_Ptr = &PORTA_REG;
 73e:	8b e3       	ldi	r24, 0x3B	; 59
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	9d 83       	std	Y+5, r25	; 0x05
 744:	8c 83       	std	Y+4, r24	; 0x04
			PIN_Ptr  = &PINA_REG;
 746:	89 e3       	ldi	r24, 0x39	; 57
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	9b 83       	std	Y+3, r25	; 0x03
 74c:	8a 83       	std	Y+2, r24	; 0x02
 74e:	1a c0       	rjmp	.+52     	; 0x784 <Dio_FlipChannel+0xbc>
	break;
	case 1:	Port_Ptr = &PORTB_REG;
 750:	88 e3       	ldi	r24, 0x38	; 56
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	9d 83       	std	Y+5, r25	; 0x05
 756:	8c 83       	std	Y+4, r24	; 0x04
			PIN_Ptr  = &PINB_REG;
 758:	86 e3       	ldi	r24, 0x36	; 54
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	9b 83       	std	Y+3, r25	; 0x03
 75e:	8a 83       	std	Y+2, r24	; 0x02
 760:	11 c0       	rjmp	.+34     	; 0x784 <Dio_FlipChannel+0xbc>
	break;
	case 2:	Port_Ptr = &PORTC_REG;
 762:	85 e3       	ldi	r24, 0x35	; 53
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9d 83       	std	Y+5, r25	; 0x05
 768:	8c 83       	std	Y+4, r24	; 0x04
			PIN_Ptr  = &PINC_REG;
 76a:	83 e3       	ldi	r24, 0x33	; 51
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	9b 83       	std	Y+3, r25	; 0x03
 770:	8a 83       	std	Y+2, r24	; 0x02
 772:	08 c0       	rjmp	.+16     	; 0x784 <Dio_FlipChannel+0xbc>
	break;
	case 3:	Port_Ptr = &PORTD_REG;
 774:	82 e3       	ldi	r24, 0x32	; 50
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	9d 83       	std	Y+5, r25	; 0x05
 77a:	8c 83       	std	Y+4, r24	; 0x04
			PIN_Ptr  = &PIND_REG;
 77c:	80 e3       	ldi	r24, 0x30	; 48
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	9b 83       	std	Y+3, r25	; 0x03
 782:	8a 83       	std	Y+2, r24	; 0x02
	break;
	}
	/* Read the required channel and write the required level */
	if(GET_BIT(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num)==1)
 784:	ea 81       	ldd	r30, Y+2	; 0x02
 786:	fb 81       	ldd	r31, Y+3	; 0x03
 788:	80 81       	ld	r24, Z
 78a:	48 2f       	mov	r20, r24
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	20 91 3e 01 	lds	r18, 0x013E
 792:	30 91 3f 01 	lds	r19, 0x013F
 796:	8e 81       	ldd	r24, Y+6	; 0x06
 798:	88 2f       	mov	r24, r24
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	f9 01       	movw	r30, r18
 7a2:	e8 0f       	add	r30, r24
 7a4:	f9 1f       	adc	r31, r25
 7a6:	81 81       	ldd	r24, Z+1	; 0x01
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <Dio_FlipChannel+0xee>
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	2a 95       	dec	r18
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <Dio_FlipChannel+0xea>
 7ba:	48 23       	and	r20, r24
 7bc:	59 23       	and	r21, r25
 7be:	20 91 3e 01 	lds	r18, 0x013E
 7c2:	30 91 3f 01 	lds	r19, 0x013F
 7c6:	8e 81       	ldd	r24, Y+6	; 0x06
 7c8:	88 2f       	mov	r24, r24
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	f9 01       	movw	r30, r18
 7d2:	e8 0f       	add	r30, r24
 7d4:	f9 1f       	adc	r31, r25
 7d6:	81 81       	ldd	r24, Z+1	; 0x01
 7d8:	88 2f       	mov	r24, r24
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	9a 01       	movw	r18, r20
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <Dio_FlipChannel+0x11c>
 7e0:	35 95       	asr	r19
 7e2:	27 95       	ror	r18
 7e4:	8a 95       	dec	r24
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <Dio_FlipChannel+0x118>
 7e8:	c9 01       	movw	r24, r18
 7ea:	81 30       	cpi	r24, 0x01	; 1
 7ec:	91 05       	cpc	r25, r1
 7ee:	11 f5       	brne	.+68     	; 0x834 <Dio_FlipChannel+0x16c>
	{
		CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 7f0:	ec 81       	ldd	r30, Y+4	; 0x04
 7f2:	fd 81       	ldd	r31, Y+5	; 0x05
 7f4:	80 81       	ld	r24, Z
 7f6:	48 2f       	mov	r20, r24
 7f8:	20 91 3e 01 	lds	r18, 0x013E
 7fc:	30 91 3f 01 	lds	r19, 0x013F
 800:	8e 81       	ldd	r24, Y+6	; 0x06
 802:	88 2f       	mov	r24, r24
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	f9 01       	movw	r30, r18
 80c:	e8 0f       	add	r30, r24
 80e:	f9 1f       	adc	r31, r25
 810:	81 81       	ldd	r24, Z+1	; 0x01
 812:	28 2f       	mov	r18, r24
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 2e       	mov	r0, r18
 81c:	02 c0       	rjmp	.+4      	; 0x822 <Dio_FlipChannel+0x15a>
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	0a 94       	dec	r0
 824:	e2 f7       	brpl	.-8      	; 0x81e <Dio_FlipChannel+0x156>
 826:	80 95       	com	r24
 828:	84 23       	and	r24, r20
 82a:	ec 81       	ldd	r30, Y+4	; 0x04
 82c:	fd 81       	ldd	r31, Y+5	; 0x05
 82e:	80 83       	st	Z, r24
		output = STD_LOW;
 830:	19 82       	std	Y+1, r1	; 0x01
 832:	21 c0       	rjmp	.+66     	; 0x876 <__stack+0x17>
	}
	else
	{
		SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 834:	ec 81       	ldd	r30, Y+4	; 0x04
 836:	fd 81       	ldd	r31, Y+5	; 0x05
 838:	80 81       	ld	r24, Z
 83a:	48 2f       	mov	r20, r24
 83c:	20 91 3e 01 	lds	r18, 0x013E
 840:	30 91 3f 01 	lds	r19, 0x013F
 844:	8e 81       	ldd	r24, Y+6	; 0x06
 846:	88 2f       	mov	r24, r24
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	f9 01       	movw	r30, r18
 850:	e8 0f       	add	r30, r24
 852:	f9 1f       	adc	r31, r25
 854:	81 81       	ldd	r24, Z+1	; 0x01
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 2e       	mov	r0, r18
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
 86a:	84 2b       	or	r24, r20
 86c:	ec 81       	ldd	r30, Y+4	; 0x04
 86e:	fd 81       	ldd	r31, Y+5	; 0x05
 870:	80 83       	st	Z, r24
		output = STD_HIGH;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	89 83       	std	Y+1, r24	; 0x01
	}
	return output;
 876:	89 81       	ldd	r24, Y+1	; 0x01
}
 878:	28 96       	adiw	r28, 0x08	; 8
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	f8 94       	cli
 87e:	de bf       	out	0x3e, r29	; 62
 880:	0f be       	out	0x3f, r0	; 63
 882:	cd bf       	out	0x3d, r28	; 61
 884:	cf 91       	pop	r28
 886:	df 91       	pop	r29
 888:	08 95       	ret

0000088a <SSD_Init>:
#include "../../MCAL/DIO/Dio_Regs.h"

//static Pin_ConfigType * Port_Pin_Config = NULL_PTR;
uint8 arr[10] = {[0]=0x3F,[1]=0x06,[2]=0x5B,[3]=0x4F,[4]=0x66,[5]=0x6D,[6]=0x7D,[7]=0x07,[8]=0x7F,[9]=0x6F};
void SSD_Init()
{
 88a:	df 93       	push	r29
 88c:	cf 93       	push	r28
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
	//uint8 *DDR_Ptr = NULL_PTR;
	//uint8 *Port_Ptr = NULL_PTR;
	Port_Init(&Port_Configuration);
 892:	8a e6       	ldi	r24, 0x6A	; 106
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 49 00 	call	0x92	; 0x92 <Port_Init>
	Dio_Init(&Dio_Configuration);
 89a:	8a e2       	ldi	r24, 0x2A	; 42
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	0e 94 2d 02 	call	0x45a	; 0x45a <Dio_Init>
	}
	If port.cfg.h has a problem in its configuration rewrite it as
	  Pull up or down dependent on common cathode or anode
	//pullup case
	SET_BIT(*Port_Ptr,Port_Pin_Config[5].Pin_Num);*/
}
 8a2:	cf 91       	pop	r28
 8a4:	df 91       	pop	r29
 8a6:	08 95       	ret

000008a8 <SSD_setValue>:

void SSD_setValue (uint8 SS_num, uint8 Value)
{
 8a8:	df 93       	push	r29
 8aa:	cf 93       	push	r28
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
 8b0:	2a 97       	sbiw	r28, 0x0a	; 10
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	f8 94       	cli
 8b6:	de bf       	out	0x3e, r29	; 62
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	cd bf       	out	0x3d, r28	; 61
 8bc:	89 87       	std	Y+9, r24	; 0x09
 8be:	6a 87       	std	Y+10, r22	; 0x0a
	char led_val[7];
	if (Value >9 || Value< 0)	{}
 8c0:	8a 85       	ldd	r24, Y+10	; 0x0a
 8c2:	8a 30       	cpi	r24, 0x0A	; 10
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <SSD_setValue+0x20>
 8c6:	58 c0       	rjmp	.+176    	; 0x978 <SSD_setValue+0xd0>
	else{
		for(uint8 i =0;i<8;i++)
 8c8:	19 82       	std	Y+1, r1	; 0x01
 8ca:	2d c0       	rjmp	.+90     	; 0x926 <SSD_setValue+0x7e>
		{
			led_val[i] = GET_BIT(arr[Value],i);
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	68 2f       	mov	r22, r24
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	8a 85       	ldd	r24, Y+10	; 0x0a
 8d4:	88 2f       	mov	r24, r24
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	fc 01       	movw	r30, r24
 8da:	e0 5a       	subi	r30, 0xA0	; 160
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	80 81       	ld	r24, Z
 8e0:	48 2f       	mov	r20, r24
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	28 2f       	mov	r18, r24
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <SSD_setValue+0x4c>
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	2a 95       	dec	r18
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <SSD_setValue+0x48>
 8f8:	9a 01       	movw	r18, r20
 8fa:	28 23       	and	r18, r24
 8fc:	39 23       	and	r19, r25
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	a9 01       	movw	r20, r18
 906:	02 c0       	rjmp	.+4      	; 0x90c <SSD_setValue+0x64>
 908:	55 95       	asr	r21
 90a:	47 95       	ror	r20
 90c:	8a 95       	dec	r24
 90e:	e2 f7       	brpl	.-8      	; 0x908 <SSD_setValue+0x60>
 910:	ca 01       	movw	r24, r20
 912:	28 2f       	mov	r18, r24
 914:	ce 01       	movw	r24, r28
 916:	02 96       	adiw	r24, 0x02	; 2
 918:	fc 01       	movw	r30, r24
 91a:	e6 0f       	add	r30, r22
 91c:	f7 1f       	adc	r31, r23
 91e:	20 83       	st	Z, r18
void SSD_setValue (uint8 SS_num, uint8 Value)
{
	char led_val[7];
	if (Value >9 || Value< 0)	{}
	else{
		for(uint8 i =0;i<8;i++)
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	8f 5f       	subi	r24, 0xFF	; 255
 924:	89 83       	std	Y+1, r24	; 0x01
 926:	89 81       	ldd	r24, Y+1	; 0x01
 928:	88 30       	cpi	r24, 0x08	; 8
 92a:	80 f2       	brcs	.-96     	; 0x8cc <SSD_setValue+0x24>
		{
			led_val[i] = GET_BIT(arr[Value],i);
		}
		if (SS_num == 0){
 92c:	89 85       	ldd	r24, Y+9	; 0x09
 92e:	88 23       	and	r24, r24
 930:	19 f5       	brne	.+70     	; 0x978 <SSD_setValue+0xd0>
			Dio_WriteChannel(DioConf_SSD1_PIN0_ID,led_val[0]);
 932:	9a 81       	ldd	r25, Y+2	; 0x02
 934:	82 e0       	ldi	r24, 0x02	; 2
 936:	69 2f       	mov	r22, r25
 938:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
			Dio_WriteChannel(DioConf_SSD1_PIN1_ID,led_val[1]);
 93c:	9b 81       	ldd	r25, Y+3	; 0x03
 93e:	83 e0       	ldi	r24, 0x03	; 3
 940:	69 2f       	mov	r22, r25
 942:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
			Dio_WriteChannel(DioConf_SSD1_PIN2_ID,led_val[2]);
 946:	9c 81       	ldd	r25, Y+4	; 0x04
 948:	84 e0       	ldi	r24, 0x04	; 4
 94a:	69 2f       	mov	r22, r25
 94c:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
			Dio_WriteChannel(DioConf_SSD1_PIN3_ID,led_val[3]);
 950:	9d 81       	ldd	r25, Y+5	; 0x05
 952:	85 e0       	ldi	r24, 0x05	; 5
 954:	69 2f       	mov	r22, r25
 956:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
			Dio_WriteChannel(DioConf_SSD1_PIN4_ID,led_val[4]);
 95a:	9e 81       	ldd	r25, Y+6	; 0x06
 95c:	86 e0       	ldi	r24, 0x06	; 6
 95e:	69 2f       	mov	r22, r25
 960:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
			Dio_WriteChannel(DioConf_SSD1_PIN5_ID,led_val[5]);
 964:	9f 81       	ldd	r25, Y+7	; 0x07
 966:	87 e0       	ldi	r24, 0x07	; 7
 968:	69 2f       	mov	r22, r25
 96a:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
			Dio_WriteChannel(DioConf_SSD1_PIN6_ID,led_val[6]);
 96e:	98 85       	ldd	r25, Y+8	; 0x08
 970:	88 e0       	ldi	r24, 0x08	; 8
 972:	69 2f       	mov	r22, r25
 974:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
	}
	}

}
 978:	2a 96       	adiw	r28, 0x0a	; 10
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	f8 94       	cli
 97e:	de bf       	out	0x3e, r29	; 62
 980:	0f be       	out	0x3f, r0	; 63
 982:	cd bf       	out	0x3d, r28	; 61
 984:	cf 91       	pop	r28
 986:	df 91       	pop	r29
 988:	08 95       	ret

0000098a <SSD_displayValue>:
void SSD_displayValue (uint8 Value)
{
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	00 d0       	rcall	.+0      	; 0x990 <SSD_displayValue+0x6>
 990:	00 d0       	rcall	.+0      	; 0x992 <SSD_displayValue+0x8>
 992:	cd b7       	in	r28, 0x3d	; 61
 994:	de b7       	in	r29, 0x3e	; 62
 996:	8c 83       	std	Y+4, r24	; 0x04
	uint8 temp = Value;
 998:	8c 81       	ldd	r24, Y+4	; 0x04
 99a:	8b 83       	std	Y+3, r24	; 0x03
	uint8  digits_counter = 0;
 99c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 sev_counter = 1;
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		digits_counter++;
 9a2:	8a 81       	ldd	r24, Y+2	; 0x02
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	8a 83       	std	Y+2, r24	; 0x02
		temp = Value/10;
 9a8:	8c 81       	ldd	r24, Y+4	; 0x04
 9aa:	9a e0       	ldi	r25, 0x0A	; 10
 9ac:	69 2f       	mov	r22, r25
 9ae:	0e 94 de 05 	call	0xbbc	; 0xbbc <__udivmodqi4>
 9b2:	8b 83       	std	Y+3, r24	; 0x03
	}while(temp!=0);
 9b4:	8b 81       	ldd	r24, Y+3	; 0x03
 9b6:	88 23       	and	r24, r24
 9b8:	a1 f7       	brne	.-24     	; 0x9a2 <SSD_displayValue+0x18>

	if(digits_counter > NO_OF_SSD){}
 9ba:	8a 81       	ldd	r24, Y+2	; 0x02
 9bc:	82 30       	cpi	r24, 0x02	; 2
 9be:	18 f5       	brcc	.+70     	; 0xa06 <SSD_displayValue+0x7c>
	else
	{
		for (sev_counter=1;sev_counter<=digits_counter;sev_counter++)
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	89 83       	std	Y+1, r24	; 0x01
 9c4:	1c c0       	rjmp	.+56     	; 0x9fe <SSD_displayValue+0x74>
		{
			temp = Value%(10 * sev_counter );
 9c6:	8c 81       	ldd	r24, Y+4	; 0x04
 9c8:	48 2f       	mov	r20, r24
 9ca:	50 e0       	ldi	r21, 0x00	; 0
 9cc:	89 81       	ldd	r24, Y+1	; 0x01
 9ce:	88 2f       	mov	r24, r24
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	9c 01       	movw	r18, r24
 9d4:	22 0f       	add	r18, r18
 9d6:	33 1f       	adc	r19, r19
 9d8:	c9 01       	movw	r24, r18
 9da:	88 0f       	add	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	28 0f       	add	r18, r24
 9e4:	39 1f       	adc	r19, r25
 9e6:	ca 01       	movw	r24, r20
 9e8:	b9 01       	movw	r22, r18
 9ea:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__divmodhi4>
 9ee:	8b 83       	std	Y+3, r24	; 0x03
			SSD_setValue (sev_counter, temp);
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
 9f2:	6b 81       	ldd	r22, Y+3	; 0x03
 9f4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <SSD_setValue>
	}while(temp!=0);

	if(digits_counter > NO_OF_SSD){}
	else
	{
		for (sev_counter=1;sev_counter<=digits_counter;sev_counter++)
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	89 83       	std	Y+1, r24	; 0x01
 9fe:	99 81       	ldd	r25, Y+1	; 0x01
 a00:	8a 81       	ldd	r24, Y+2	; 0x02
 a02:	89 17       	cp	r24, r25
 a04:	00 f7       	brcc	.-64     	; 0x9c6 <SSD_displayValue+0x3c>
			temp = Value%(10 * sev_counter );
			SSD_setValue (sev_counter, temp);
		}
	}

}
 a06:	0f 90       	pop	r0
 a08:	0f 90       	pop	r0
 a0a:	0f 90       	pop	r0
 a0c:	0f 90       	pop	r0
 a0e:	cf 91       	pop	r28
 a10:	df 91       	pop	r29
 a12:	08 95       	ret

00000a14 <LED_Init>:
#include "C:\ITI\Workspace\Drivers\MCAL\PORT\Port.h"
#include "C:\ITI\Workspace\Drivers\MCAL\DIO\Dio.h"
#include "Led_Cfg.h"

void LED_Init()
{
 a14:	df 93       	push	r29
 a16:	cf 93       	push	r28
 a18:	cd b7       	in	r28, 0x3d	; 61
 a1a:	de b7       	in	r29, 0x3e	; 62
	Port_Init(&Port_Configuration);
 a1c:	8a e6       	ldi	r24, 0x6A	; 106
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 49 00 	call	0x92	; 0x92 <Port_Init>
	Dio_Init(&Dio_Configuration);
 a24:	8a e2       	ldi	r24, 0x2A	; 42
 a26:	91 e0       	ldi	r25, 0x01	; 1
 a28:	0e 94 2d 02 	call	0x45a	; 0x45a <Dio_Init>
	LED_setOff();
 a2c:	0e 94 34 05 	call	0xa68	; 0xa68 <LED_setOff>
}
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <LED_getState>:

uint8 LED_getState(void)
{
 a36:	df 93       	push	r29
 a38:	cf 93       	push	r28
 a3a:	0f 92       	push	r0
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
	uint8 state = Dio_ReadChannel(DioConf_LED_CHANNEL_ID_INDEX);
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Dio_ReadChannel>
 a46:	89 83       	std	Y+1, r24	; 0x01
	return state;
 a48:	89 81       	ldd	r24, Y+1	; 0x01
}
 a4a:	0f 90       	pop	r0
 a4c:	cf 91       	pop	r28
 a4e:	df 91       	pop	r29
 a50:	08 95       	ret

00000a52 <LED_setOn>:
void LED_setOn(void)
{
 a52:	df 93       	push	r29
 a54:	cf 93       	push	r28
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_ON); // LED ON
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	61 e0       	ldi	r22, 0x01	; 1
 a5e:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
}
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	08 95       	ret

00000a68 <LED_setOff>:
void LED_setOff(void)
{
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_OFF); // LED OFF
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	0e 94 3f 02 	call	0x47e	; 0x47e <Dio_WriteChannel>
}
 a78:	cf 91       	pop	r28
 a7a:	df 91       	pop	r29
 a7c:	08 95       	ret

00000a7e <LED_toggle>:
void LED_toggle(void)
{
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	0f 92       	push	r0
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_FlipChannel(DioConf_LED_CHANNEL_ID_INDEX);
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Dio_FlipChannel>
 a8e:	89 83       	std	Y+1, r24	; 0x01
}
 a90:	0f 90       	pop	r0
 a92:	cf 91       	pop	r28
 a94:	df 91       	pop	r29
 a96:	08 95       	ret

00000a98 <BUTTON_Init>:
#include "C:\ITI\Workspace\Drivers\MCAL\PORT\Port.h"
#include "C:\ITI\Workspace\Drivers\MCAL\DIO\Dio.h"
#include "Button_Cfg.h"

void BUTTON_Init()
{
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	cd b7       	in	r28, 0x3d	; 61
 a9e:	de b7       	in	r29, 0x3e	; 62
	Port_Init(&Port_Configuration);
 aa0:	8a e6       	ldi	r24, 0x6A	; 106
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	0e 94 49 00 	call	0x92	; 0x92 <Port_Init>
	Dio_Init(&Dio_Configuration);
 aa8:	8a e2       	ldi	r24, 0x2A	; 42
 aaa:	91 e0       	ldi	r25, 0x01	; 1
 aac:	0e 94 2d 02 	call	0x45a	; 0x45a <Dio_Init>
	LED_setOff();
 ab0:	0e 94 34 05 	call	0xa68	; 0xa68 <LED_setOff>
}
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	08 95       	ret

00000aba <BUTTON_getState>:

/*******************************************************************************************************************/
uint8 BUTTON_getState(void)
{
 aba:	df 93       	push	r29
 abc:	cf 93       	push	r28
 abe:	0f 92       	push	r0
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
	uint8 state = Dio_ReadChannel(DioConf_BUTTON_CHANNEL_ID_INDEX);
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Dio_ReadChannel>
 aca:	89 83       	std	Y+1, r24	; 0x01
	return state;
 acc:	89 81       	ldd	r24, Y+1	; 0x01
}
 ace:	0f 90       	pop	r0
 ad0:	cf 91       	pop	r28
 ad2:	df 91       	pop	r29
 ad4:	08 95       	ret

00000ad6 <Init_Task1>:
#include "../HAL/LED/Led.h"
#include "../HAL/BUTTON/Button.h"

/* Task Called Once to initialize all the Modules */
void Init_Task1(void)
{
 ad6:	df 93       	push	r29
 ad8:	cf 93       	push	r28
 ada:	cd b7       	in	r28, 0x3d	; 61
 adc:	de b7       	in	r29, 0x3e	; 62
	LED_Init();
 ade:	0e 94 0a 05 	call	0xa14	; 0xa14 <LED_Init>
	BUTTON_Init();
 ae2:	0e 94 4c 05 	call	0xa98	; 0xa98 <BUTTON_Init>
}
 ae6:	cf 91       	pop	r28
 ae8:	df 91       	pop	r29
 aea:	08 95       	ret

00000aec <Init_Task2>:

void Init_Task2(void)
{
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
	SSD_Init();
 af4:	0e 94 45 04 	call	0x88a	; 0x88a <SSD_Init>

}
 af8:	cf 91       	pop	r28
 afa:	df 91       	pop	r29
 afc:	08 95       	ret

00000afe <blinking_task>:

void blinking_task()
{
 afe:	df 93       	push	r29
 b00:	cf 93       	push	r28
 b02:	0f 92       	push	r0
 b04:	cd b7       	in	r28, 0x3d	; 61
 b06:	de b7       	in	r29, 0x3e	; 62

	static uint8 button_previous_state = BUTTON_RELEASED;
	static uint8 button_current_state  = BUTTON_RELEASED;
	uint8 led_current_state;

	led_current_state = LED_getState(); //Read the Led state
 b08:	0e 94 1b 05 	call	0xa36	; 0xa36 <LED_getState>
 b0c:	89 83       	std	Y+1, r24	; 0x01
	button_current_state = BUTTON_getState(); //Read the button state
 b0e:	0e 94 5d 05 	call	0xaba	; 0xaba <BUTTON_getState>
 b12:	80 93 40 01 	sts	0x0140, r24

		/* Only Toggle the led in case the current state of the switch is pressed
		 * and the previous state is released */
	if((button_current_state == BUTTON_PRESSED) && (button_previous_state == BUTTON_RELEASED))
 b16:	80 91 40 01 	lds	r24, 0x0140
 b1a:	81 30       	cpi	r24, 0x01	; 1
 b1c:	61 f4       	brne	.+24     	; 0xb36 <blinking_task+0x38>
 b1e:	80 91 41 01 	lds	r24, 0x0141
 b22:	88 23       	and	r24, r24
 b24:	41 f4       	brne	.+16     	; 0xb36 <blinking_task+0x38>
	{
		if (led_current_state == LED_ON)
 b26:	89 81       	ldd	r24, Y+1	; 0x01
 b28:	81 30       	cpi	r24, 0x01	; 1
 b2a:	19 f4       	brne	.+6      	; 0xb32 <blinking_task+0x34>
			LED_setOff();
 b2c:	0e 94 34 05 	call	0xa68	; 0xa68 <LED_setOff>
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <blinking_task+0x38>
		else
			LED_setOn();
 b32:	0e 94 29 05 	call	0xa52	; 0xa52 <LED_setOn>
	}
	/*	else if ((button_current_state == BUTTON_RELEASED) && (button_previous_state = BUTTON_PRESSED))
		{
			LED_toggle();
		}*/
	button_previous_state = button_current_state;
 b36:	80 91 40 01 	lds	r24, 0x0140
 b3a:	80 93 41 01 	sts	0x0141, r24
}
 b3e:	0f 90       	pop	r0
 b40:	cf 91       	pop	r28
 b42:	df 91       	pop	r29
 b44:	08 95       	ret

00000b46 <ss_task1>:
void ss_task1()
{
 b46:	df 93       	push	r29
 b48:	cf 93       	push	r28
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
	SSD_displayValue(5);
 b4e:	85 e0       	ldi	r24, 0x05	; 5
 b50:	0e 94 c5 04 	call	0x98a	; 0x98a <SSD_displayValue>
}
 b54:	cf 91       	pop	r28
 b56:	df 91       	pop	r29
 b58:	08 95       	ret

00000b5a <ss_task2>:
void ss_task2()
{
 b5a:	df 93       	push	r29
 b5c:	cf 93       	push	r28
 b5e:	0f 92       	push	r0
 b60:	cd b7       	in	r28, 0x3d	; 61
 b62:	de b7       	in	r29, 0x3e	; 62
	static uint8 button_previous_state = BUTTON_RELEASED;
		static uint8 button_current_state  = BUTTON_RELEASED;
		uint8 led_current_state;

		button_current_state = BUTTON_getState(); //Read the button state
 b64:	0e 94 5d 05 	call	0xaba	; 0xaba <BUTTON_getState>
 b68:	80 93 43 01 	sts	0x0143, r24
		static uint8 tick=0;

			/* Only Toggle the led in case the current state of the switch is pressed
			 * and the previous state is released */
		if((button_current_state == BUTTON_PRESSED) && (button_previous_state == BUTTON_RELEASED))
 b6c:	80 91 43 01 	lds	r24, 0x0143
 b70:	81 30       	cpi	r24, 0x01	; 1
 b72:	49 f4       	brne	.+18     	; 0xb86 <ss_task2+0x2c>
 b74:	80 91 44 01 	lds	r24, 0x0144
 b78:	88 23       	and	r24, r24
 b7a:	29 f4       	brne	.+10     	; 0xb86 <ss_task2+0x2c>
		{
			tick++;
 b7c:	80 91 42 01 	lds	r24, 0x0142
 b80:	8f 5f       	subi	r24, 0xFF	; 255
 b82:	80 93 42 01 	sts	0x0142, r24
		}
		if (tick>9) tick=0;
 b86:	80 91 42 01 	lds	r24, 0x0142
 b8a:	8a 30       	cpi	r24, 0x0A	; 10
 b8c:	10 f0       	brcs	.+4      	; 0xb92 <ss_task2+0x38>
 b8e:	10 92 42 01 	sts	0x0142, r1
		SSD_displayValue(tick);
 b92:	80 91 42 01 	lds	r24, 0x0142
 b96:	0e 94 c5 04 	call	0x98a	; 0x98a <SSD_displayValue>
		button_previous_state = button_current_state;
 b9a:	80 91 43 01 	lds	r24, 0x0143
 b9e:	80 93 44 01 	sts	0x0144, r24
}
 ba2:	0f 90       	pop	r0
 ba4:	cf 91       	pop	r28
 ba6:	df 91       	pop	r29
 ba8:	08 95       	ret

00000baa <main>:
#include "C:\ITI\Workspace\Drivers\APP\task.h"

//#define TASK1
#define TASK_SSD
int main(void)
{
 baa:	df 93       	push	r29
 bac:	cf 93       	push	r28
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62

		blinking_task();
	}
#endif
#ifdef TASK_SSD
	Init_Task2();
 bb2:	0e 94 76 05 	call	0xaec	; 0xaec <Init_Task2>
	while(1)
	{
		ss_task2();
 bb6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <ss_task2>
 bba:	fd cf       	rjmp	.-6      	; 0xbb6 <main+0xc>

00000bbc <__udivmodqi4>:
 bbc:	99 1b       	sub	r25, r25
 bbe:	79 e0       	ldi	r23, 0x09	; 9
 bc0:	04 c0       	rjmp	.+8      	; 0xbca <__udivmodqi4_ep>

00000bc2 <__udivmodqi4_loop>:
 bc2:	99 1f       	adc	r25, r25
 bc4:	96 17       	cp	r25, r22
 bc6:	08 f0       	brcs	.+2      	; 0xbca <__udivmodqi4_ep>
 bc8:	96 1b       	sub	r25, r22

00000bca <__udivmodqi4_ep>:
 bca:	88 1f       	adc	r24, r24
 bcc:	7a 95       	dec	r23
 bce:	c9 f7       	brne	.-14     	; 0xbc2 <__udivmodqi4_loop>
 bd0:	80 95       	com	r24
 bd2:	08 95       	ret

00000bd4 <__divmodhi4>:
 bd4:	97 fb       	bst	r25, 7
 bd6:	09 2e       	mov	r0, r25
 bd8:	07 26       	eor	r0, r23
 bda:	0a d0       	rcall	.+20     	; 0xbf0 <__divmodhi4_neg1>
 bdc:	77 fd       	sbrc	r23, 7
 bde:	04 d0       	rcall	.+8      	; 0xbe8 <__divmodhi4_neg2>
 be0:	0c d0       	rcall	.+24     	; 0xbfa <__udivmodhi4>
 be2:	06 d0       	rcall	.+12     	; 0xbf0 <__divmodhi4_neg1>
 be4:	00 20       	and	r0, r0
 be6:	1a f4       	brpl	.+6      	; 0xbee <__divmodhi4_exit>

00000be8 <__divmodhi4_neg2>:
 be8:	70 95       	com	r23
 bea:	61 95       	neg	r22
 bec:	7f 4f       	sbci	r23, 0xFF	; 255

00000bee <__divmodhi4_exit>:
 bee:	08 95       	ret

00000bf0 <__divmodhi4_neg1>:
 bf0:	f6 f7       	brtc	.-4      	; 0xbee <__divmodhi4_exit>
 bf2:	90 95       	com	r25
 bf4:	81 95       	neg	r24
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	08 95       	ret

00000bfa <__udivmodhi4>:
 bfa:	aa 1b       	sub	r26, r26
 bfc:	bb 1b       	sub	r27, r27
 bfe:	51 e1       	ldi	r21, 0x11	; 17
 c00:	07 c0       	rjmp	.+14     	; 0xc10 <__udivmodhi4_ep>

00000c02 <__udivmodhi4_loop>:
 c02:	aa 1f       	adc	r26, r26
 c04:	bb 1f       	adc	r27, r27
 c06:	a6 17       	cp	r26, r22
 c08:	b7 07       	cpc	r27, r23
 c0a:	10 f0       	brcs	.+4      	; 0xc10 <__udivmodhi4_ep>
 c0c:	a6 1b       	sub	r26, r22
 c0e:	b7 0b       	sbc	r27, r23

00000c10 <__udivmodhi4_ep>:
 c10:	88 1f       	adc	r24, r24
 c12:	99 1f       	adc	r25, r25
 c14:	5a 95       	dec	r21
 c16:	a9 f7       	brne	.-22     	; 0xc02 <__udivmodhi4_loop>
 c18:	80 95       	com	r24
 c1a:	90 95       	com	r25
 c1c:	bc 01       	movw	r22, r24
 c1e:	cd 01       	movw	r24, r26
 c20:	08 95       	ret

00000c22 <_exit>:
 c22:	f8 94       	cli

00000c24 <__stop_program>:
 c24:	ff cf       	rjmp	.-2      	; 0xc24 <__stop_program>
